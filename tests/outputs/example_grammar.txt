Using token 1 for nonterminal A
Using token 2 for nonterminal B
Using token 3 for nonterminal C
Successfully parsed grammar
Symbol mapping (Negative = terminal):
-3 -->  c
-2 -->  b
-1 -->  a
 0 -->  |
 1 -->  A
 2 -->  B
 3 -->  C
Rules:
 1 -->  1 -1  |  2 -2  |  3 
 2 -->  1  2  |  3  1  |  2  1 
 3 -->  3 -1  | -3 -3 
Rules Prettified:
 A -->  A  a  |  B  b  |  C 
 B -->  A  B  |  C  A  |  B  A 
 C -->  C  a  |  c  c 


Epsilon check
1 has epsilon? false
2 has epsilon? false
3 has epsilon? false

Cycle check
Could not find cycle
Making cfg proper
Symbol mapping (Negative = terminal):
-3 -->  c
-2 -->  b
-1 -->  a
 0 -->  |
 1 -->  A
 2 -->  B
 3 -->  C
Rules:
 1 -->  1 -1  |  2 -2  |  3 
 2 -->  1  2  |  3  1  |  2  1 
 3 -->  3 -1  | -3 -3 
Rules Prettified:
 A -->  A  a  |  B  b  |  C 
 B -->  A  B  |  C  A  |  B  A 
 C -->  C  a  |  c  c 


Before immediate recursion removal for nonterm 1(sym A):
 1 -1
 2 -2
 3
Before immediate recursion removal for nonterm 2(sym B):
 2 -2 4 2
 3 4 2
 3 1
 2 1
Before immediate recursion removal for nonterm 3(sym C):
 3 -1
 -3 -3
Removed all left recursion from the grammar
Symbol mapping (Negative = terminal):
-3 -->  c
-2 -->  b
-1 -->  a
 0 -->  |
 1 -->  A
 2 -->  B
 3 -->  C
 4 -->  D
 5 -->  E
 6 -->  F
Rules:
 1 -->  2 -2  4  |  3  4 
 2 -->  3  4  2  5  |  3  1  5 
 3 --> -3 -3  6 
 4 -->  | -1  4 
 5 -->  | -2  4  2  5  |  1  5 
 6 -->  | -1  6 
Rules Prettified:
 A -->  B  b  D  |  C  D 
 B -->  C  D  B  E  |  C  A  E 
 C -->  c  c  F 
 D -->  |  a  D 
 E -->  |  b  D  B  E  |  A  E 
 F -->  |  a  F 


END OF PROGRAM
